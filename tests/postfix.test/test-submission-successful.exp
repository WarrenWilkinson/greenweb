proc base64url_encode {string} {
    tailcall binary encode base64 $string
}

proc base64url_decode {string} {
    tailcall binary decode base64 $string
}

set myusername [base64url_encode "test@greenweb.ca"]
set mypassword [base64url_encode "test"]
set serv_username [base64url_encode "Username:"]
set serv_password [base64url_encode "Password:"]
set timeout 10

spawn openssl s_client -connect postfix.greenweb.ca:587 -starttls smtp
expect "read R BLOCK"
send "EHLO postfix.greenweb.ca\r"
# Wait with an expect, for pipelining reasons.
expect "mail.greenweb.ca"

# Authenticate
send "AUTH LOGIN\r"
expect $serv_username
send "$myusername\r"
expect $serv_password
send "$mypassword\r"
expect "uthentication successful" { } \
       "uthentication failed" { fail "Authenitication failed."; quit } \
       timeout { fail "Mail timed out after auth."; quit }

# Send a message
send "MAIL FROM: <testgroup@greenweb.ca>\r"
expect "Ok" { } \
       "cannot find your hostname" { fail "Couldn't find your hostname..."; quit } \
       timeout { fail "timeout in mail from!"; quit }
send "rcpt to:<test@greenweb.ca>\r"
expect "Ok" { } \
    "Unknown user" { fail "mail was rejected with unknown user."; quit } \
    "Temporary internal error" { fail "mail had internal error."; quit } \
    "User unknown" { fail "mail was rejected with User unknown."; quit } \
    "Temporary lookup failure" { fail "Mail reject temp lookup fail."; quit } \
    timeout { fail "Mail timed out."; quit }
send "DATA\r"
send "From: Bogus <bogus@bogus.com>\r"
send "Subject: The Next Meeting\r"
send "To: john@mail.com\r"
send "\r"
send "Hi John,\r"
send "This message should be encrypted on disk.\r"
send "\r"
send "Bye!\r"
send "Bogus\r"
send ".\r"
expect "ueued" { pass "Mail was successfully queued." } \
       timeout { fail "Mail timed out." }
send "QUIT\r"
expect "Bye"
